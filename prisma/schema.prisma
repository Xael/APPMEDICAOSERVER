// ./prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// MODELO DE UNIDADE DE MEDIDA
// ============================================================
model Unit {
  id        Int       @id @default(autoincrement())
  name      String    // Ex: "Metros Quadrados", "Horas", "Quantidade"
  symbol    String    // Ex: "m¬≤", "h", "qtd"
  services  Service[]
}

// ============================================================
// MODELO DE SERVI√áO
// ============================================================
model Service {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  unitId    Int
  unit      Unit      @relation(fields: [unitId], references: [id])
  locations LocationService[]
}

// ============================================================
// MODELO DE LOCAL
// ============================================================
model Location {
  id        Int      @id @default(autoincrement())
  city      String   // O frontend chama isso de 'contractGroup'
  name      String
  lat       Float?
  lng       Float?

  records   Record[]
  services  LocationService[]
}

// ============================================================
// MODELO DE RELA√á√ÉO LOCAL x SERVI√áO
// ============================================================
model LocationService {
  locationId  Int
  serviceId   Int
  measurement Float

  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([locationId, serviceId])
}

// ============================================================
// MODELO DE USU√ÅRIO
// ============================================================
model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  name              String
  password          String
  role              String   // ADMIN, OPERATOR, FISCAL
  assignments       Json?
  records           Record[]
  auditLogs         AuditLog[]

  // üÜï Campos adicionados para recupera√ß√£o de senha
  resetToken        String?  @unique        // Token tempor√°rio enviado por e-mail
  resetTokenExpires DateTime?      // Data/hora de expira√ß√£o do token
}

// ============================================================
// MODELO DE REGISTRO (execu√ß√µes de servi√ßos)
// ============================================================
model Record {
  id              Int       @id @default(autoincrement())
  operatorId      Int
  operatorName    String
  serviceType     String
  serviceUnit     String
  locationId      Int?
  locationName    String
  contractGroup   String
  locationArea    Float?
  gpsUsed         Boolean
  startTime       DateTime
  endTime         DateTime?
  beforePhotos    String[]
  afterPhotos     String[]
  overrideMeasurement Float?

  operator        User      @relation(fields: [operatorId], references: [id])
  location        Location? @relation(fields: [locationId], references: [id])
}

// ============================================================
// MODELO DE METAS
// ============================================================
model Goal {
  id            Int      @id @default(autoincrement())
  contractGroup String
  month         String
  targetArea    Float
}

// ============================================================
// CONFIGURA√á√ïES DE CONTRATO
// ============================================================
model ContractConfig {
  id             Int    @id @default(autoincrement())
  contractGroup  String @unique
  cycleStartDay  Int
}

// ============================================================
// LOGS DE AUDITORIA
// ============================================================
model AuditLog {
  id            Int      @id @default(autoincrement())
  timestamp     DateTime @default(now())
  adminId       Int
  adminUsername String
  action        String
  recordId      Int
  details       String

  admin         User     @relation(fields: [adminId], references: [id])
}


